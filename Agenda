1.

The only thing needed to complete the simulator is after-delay. The idea here is that we maintain a data structure, called an agenda, 
that contains a schedule of things to do. The following operations are defined for agendas:

(make-agenda)
returns a new empty agenda.
(empty-agenda? <agenda>)
is true if the specified agenda is empty.
(first-agenda-item <agenda>)
returns the first item on the agenda.
(remove-first-agenda-item! <agenda>)
modifies the agenda by removing the first item.
(add-to-agenda! <time> <action> <agenda>)
modifies the agenda by adding the given action procedure to be run at the specified time.
(current-time <agenda>)
returns the current simulation time.

2.
(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda))
                  action
                  the-agenda))


3.
(define (propagate)
  (if (empty-agenda? the-agenda)
      'done
      (let ((first-item (first-agenda-item the-agenda)))
        (first-item)
        (remove-first-agenda-item! the-agenda)
        (propagate))))
